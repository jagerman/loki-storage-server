From: Jason Rhinelander <jason@imaginary.ca>
Date: Wed, 26 Feb 2020 13:20:16 -0400
Subject: Add systemd notify support

This allows running storage server as a Type=notify service, with
systemd watchdog pings and a service status line.

Aside from allowing systemd watchdog to restart it, this gives a Status
line (in `systemctl status loki-storage-server`) such as:

     Status: "v1.0.9; 104 msgs; reqs(S/R): 0/4; conns(in/http/https): 0/0/1"
---
 httpserver/CMakeLists.txt   | 18 ++++++++++++++++++
 httpserver/main.cpp         | 21 +++++++++++++++++++++
 httpserver/service_node.cpp | 21 +++++++++++++++++++++
 httpserver/service_node.h   |  2 ++
 4 files changed, 62 insertions(+)

diff --git a/httpserver/CMakeLists.txt b/httpserver/CMakeLists.txt
index 34dc65f..a06cdb7 100644
--- a/httpserver/CMakeLists.txt
+++ b/httpserver/CMakeLists.txt
@@ -72,4 +72,22 @@ string(TIMESTAMP BUILD_TIME UTC)
 message(STATUS "using UTC build time ${BUILD_TIME}")
 target_compile_definitions(httpserver PRIVATE -DSTORAGE_SERVER_GIT_HASH_STRING="deb-${LOKISS_VERSION_TAG}")
 target_compile_definitions(httpserver PRIVATE -DSTORAGE_SERVER_BUILD_TIME="${BUILD_TIME}")
+
+find_package(PkgConfig QUIET)
+if(PKG_CONFIG_FOUND)
+    pkg_check_modules(SYSTEMD libsystemd)
+    # Default ENABLE_SYSTEMD to true if we found it
+    option(ENABLE_SYSTEMD "enable systemd integration for sd_notify" ${SYSTEMD_FOUND})
+
+    if(ENABLE_SYSTEMD)
+        if(NOT SYSTEMD_FOUND)
+            message(FATAL_ERROR "libsystemd not found")
+        endif()
+        target_compile_definitions(httpserver PRIVATE ENABLE_SYSTEMD)
+        target_include_directories(httpserver PRIVATE ${SYSTEMD_INCLUDE_DIRS})
+        target_link_libraries(httpserver PRIVATE ${SYSTEMD_LIBRARIES})
+    endif()
+endif()
+
+
 #
diff --git a/httpserver/main.cpp b/httpserver/main.cpp
index 91e7276..e3c9857 100644
--- a/httpserver/main.cpp
+++ b/httpserver/main.cpp
@@ -17,6 +17,12 @@
 #include <iostream>
 #include <vector>
 
+#ifdef ENABLE_SYSTEMD
+extern "C" {
+#include <systemd/sd-daemon.h>
+}
+#endif
+
 namespace fs = boost::filesystem;
 
 static boost::optional<fs::path> get_home_dir() {
@@ -33,6 +39,15 @@ static boost::optional<fs::path> get_home_dir() {
     return fs::path(pszHome);
 }
 
+#ifdef ENABLE_SYSTEMD
+static void systemd_watchdog_tick(boost::asio::steady_timer &timer, const loki::ServiceNode& sn) {
+    using namespace std::literals;
+    sd_notify(0, ("WATCHDOG=1\nSTATUS=" + sn.get_status_line()).c_str());
+    timer.expires_after(10s);
+    timer.async_wait([&](const boost::system::error_code&) { systemd_watchdog_tick(timer, sn); });
+}
+#endif
+
 constexpr int EXIT_INVALID_PORT = 2;
 
 int main(int argc, char* argv[]) {
@@ -182,6 +197,12 @@ int main(int argc, char* argv[]) {
 
         loki::Security security(lokid_key_pair, options.data_dir);
 
+#ifdef ENABLE_SYSTEMD
+        sd_notify(0, "READY=1");
+        boost::asio::steady_timer systemd_watchdog_timer(ioc);
+        systemd_watchdog_tick(systemd_watchdog_timer, service_node);
+#endif
+
         /// Should run http server
         loki::http_server::run(ioc, options.ip, options.port, options.data_dir,
                                service_node, channel_encryption, rate_limiter,
diff --git a/httpserver/service_node.cpp b/httpserver/service_node.cpp
index d4c7bbf..ddb18a8 100644
--- a/httpserver/service_node.cpp
+++ b/httpserver/service_node.cpp
@@ -1608,6 +1608,27 @@ std::string ServiceNode::get_stats() const {
     return val.dump(indent);
 }
 
+std::string ServiceNode::get_status_line() const {
+    // This produces a short, single-line status string, used when running as a systemd Type=notify
+    // service to update the service Status line.  The status message has to be fairly short: has to
+    // fit on one line, and if it's too long systemd just truncates it when displaying it.
+    std::ostringstream s;
+    s << 'v' << STORAGE_SERVER_VERSION_STRING;
+    if (!loki::is_mainnet()) s << " (TESTNET)";
+
+    if (!swarm_ || !swarm_->is_valid())
+        s << "; NO SWARM";
+    if (syncing_)
+        s << "; SYNCING";
+    uint64_t total_stored;
+    if (db_->get_message_count(total_stored))
+        s << "; " << total_stored << " msgs";
+    s << "; reqs(S/R): " << all_stats_.get_total_store_requests() << '/' << all_stats_.get_total_retrieve_requests();
+    s << "; conns(in/http/https): " << get_net_stats().connections_in << '/' << get_net_stats().http_connections_out <<
+        '/' << get_net_stats().https_connections_out;
+    return s.str();
+}
+
 int ServiceNode::get_curr_pow_difficulty() const {
     return curr_pow_difficulty_.difficulty;
 }
diff --git a/httpserver/service_node.h b/httpserver/service_node.h
index f7aadb3..7ca3f15 100644
--- a/httpserver/service_node.h
+++ b/httpserver/service_node.h
@@ -311,6 +311,8 @@ class ServiceNode {
     set_difficulty_history(const std::vector<pow_difficulty_t>& new_history);
 
     std::string get_stats() const;
+
+    std::string get_status_line() const;
 };
 
 } // namespace loki
